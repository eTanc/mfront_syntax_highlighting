%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
file_extensions:
  - mfront
scope: source.c++
variables:
  identifier: \b[[:alpha:]_][[:alnum:]_]*\b # upper and lowercase
  comment_decorator: '^@[a-zA-Z]*\b'
contexts:
  main:
    # Strings begin and end with quotes, and use backslashes as an escape
    # character
    - match: '"'
      scope: punctuation.definition.string.begin.c++
      push: double_quoted_string

    # Comments begin with a '//' and finish at the end of the line
    - match: '//'
      scope: punctuation.definition.comment.c++
      push: line_comment

    # Keywords are if, else for and while.
    # Note that blackslashes don't need to be escaped within single quoted
    # strings in YAML. When using single quoted strings, only single quotes
    # need to be escaped: this is done by using two single quotes next to each
    # other.
    - match: '\b(if|else|for|while)\b'
      scope: support.function
      
    - match: '\b(i|j|k)\b'
      scope: 
    - match: '\b(CONSISTENTTANGENTOPERATOR|ELASTIC|SECANTOPERATOR)\b'
      scope: storage.type.function
    # Numbers
    - match: '\b(-)?[0-9.e]+\b'
      scope: constant.numeric.c++

    - match: '(@AccelerationAlgorithm|@AccelerationAlgorithmParameter|@Algorithm|@Author|@AuxiliaryStateVar|@AuxiliaryStateVariable|@Behaviour|@Bounds|@Brick|@CastemAccelerationPeriod|@CastemAccelerationTrigger|@Coef|@CohesiveForce|@CohesiveForceEpsilon|@CompareToNumericalJacobian|@CompareToNumericalTangentOperator|@ComputedVar|@ComputeFinalStress|@ComputeStress|@ComputeThermalExpansion|@Constant|@ConstantMaterialProperty|@Date|@DeformationGradient|@DeformationGradientEpsilon|@Derivative|@Description|@Domain|@Domains|@DrivingVariable|@DrivingVariableEpsilon|@DSL|@Epsilon|@Evolution|@ExternalStateVar|@ExternalStateVariable|@FlowRule|@Function|@GlobalParameter|@HandleThermalExpansion|@Import|@ImposedCohesiveForce|@ImposedDeformationGradient|@ImposedDrivingVariable|@ImposedOpeningDisplacement|@ImposedStrain|@ImposedStress|@ImposedThermodynamicForce|@Includes|@InitializeJacobian|@InitializeJacobianInvert|@InitializeLocalVariables|@InitJacobian|@InitJacobianInvert|@InitLocalVariables|@InitLocalVars|@Input|@IntegerConstant|@IntegerParameter|@IntegrationVariable|@Integrator|@Interface|@InternalStateVariable|@IsotropicBehaviour|@IsotropicElasticBehaviour|@IsTangentOperatorSymmetric|@IterMax|@JacobianComparisonCriterion|@JacobianComparisonCriterium|@Law|@Library|@Link|@LocalParameter|@LocalVar|@LocalVariable|@Material|@MaterialLaw|@MaterialProperty|@MaximumIncrementValuePerIteration|@MaximumNumberOfIterations|@MaximumNumberOfSubSteps|@Members|@MFront|@MinimalTimeStep|@Model|@ModellingHypotheses|@ModellingHypothesis|@NumericalTangentOperatorPerturbationValue|@OpeningDisplacement|@OpeningDisplacementEpsilon|@OrthotropicBehaviour|@Output|@OutputFile|@OutputFilePrecision|@Parameter|@Parser|@PerturbationValueForNumericalJacobianComputation|@PhysicalBounds|@PredictionOperator|@PredictionPolicy|@Predictor|@Private|@Profiling|@ProvidesSymmetricTangentOperator|@ProvidesTangentOperator|@Real|@RequireStiffnessOperator|@RequireStiffnessTensor|@RequireThermalExpansionCoefficientTensor|@ResidualFile|@ResidualFilePrecision|@RotationMatrix|@Sources|@StateVar|@StateVariable|@StaticVar|@StaticVariable|@StiffnessMatrixType|@StiffnessUpdatePolicy|@Strain|@StrainEpsilon|@Stress|@StressEpsilon|@TangentOperator|@TangentOperatorComparisonCriterium|@Test|@ThermodynamicForce|@ThermodynamicForceEpsilon|@Theta|@Times|@UnsignedIntegerParameter|@UpdateAuxiliaryStateVariables|@UpdateAuxiliaryStateVars|@UsableInPurelyImplicitResolution|@UseCastemAccelerationAlgorithm|@UseQt)\b'
      scope: entity.name.class.c++

    - match: '(=|\+|-|\*|/|!=|>|<)'
      scope: keyword.operator.assignment.c++

    - match: '\b(stress|strain|Stensor|StrainStensor|Stensor4|real|auto|const|unsigned|short)\b'
      scope: storage.modifier.c++

    - match: '::|\.'
      scope: punctuation.accessor.c++

    - match: ';'
      scope: punctuation.terminator.c++

    - match: '{'
      scope: punctuation.section.block.end

    - match: '}'
      scope: punctuation.section.block.end

    - match: '\['
      scope: punctuation.section.brackets.end

    - match: '\]'
      scope: punctuation.section.brackets.end

    - match: '\('
      scope: punctuation.section.parens.begin

    - match: '\)'
      scope: punctuation.section.parens.end

    - match: '({{identifier}})(?=::)'
      captures:
        1: keyword.control.import

    - match: '{{identifier}}\.{{identifier}}'
      scope: variable.other.member

    - match: '{{comment_decorator}}\s+(.+);'
      captures:
        1: punctuation.definition.comment.c++

  double_quoted_string:
    - meta_scope: string.quoted.double.c++
    - match: '\\.'
      scope: constant.character.escape.c++
    - match: '"'
      scope: punctuation.definition.string.end.c++
      pop: true

  line_comment:
    - meta_scope: comment.line.example-c
    - match: $
      pop: true